<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_slackerbot.Gulash</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Gulash API: Hungarian Notation</description>
        <name>Gulash</name>
        <script><![CDATA[var Gulash = Class.create();
Gulash.prototype = {
    initialize: function(grChat) {
        this._init(grChat);
    },
    // !gulash var gr sn_compliance_control
    // !gulash var gr incident

    parse: function() {
        return this._parse();
    },

    _init: function(grChat) {
        this.grChat = grChat;
        var regex = /^(!gulash|!gu)/;
        this.objChat = {
            'channel': grChat.getValue('channel') || '',
            'text': grChat.getValue('text').replace(regex, '').trim() || '',
            'thread_ts': grChat.getValue('thread_ts') || '',
            'ts': grChat.getValue('ts') || '',
            'user': grChat.getValue('user') || '',
        };
    },

    _parse: function() {
        var strMessage = this.objChat.text; // var gr sn_compliance_control
        this.arrArguments = strMessage.split(' ');
        var strTypeObject = this.arrArguments[0] || '';

        switch (strTypeObject) {
            case 'var':
                return this._getVariableName();
            default:
                return 'Thanks for using Gulash! :thumbsup:\nUse: `!gu var [gr|arr|str] [tablename|list|string]` to return a code snippet for Hungarian Notation. \nSuch as: \n`!gu var gr incident` will return \n`var grIncident = new GlideRecord(\'incident\');`';
        }

    },

    _getVariableName: function() {
        var arrArguments = this.arrArguments || [];
        var strTypeVariable = arrArguments[1] || '';
		var str = '';
        switch (strTypeVariable) {
            case 'gr':
                var strVarTableName = this._getVariableTableName() || '';
				str = '`var gr' + strVarTableName + ' = new GlideRecord(\''+ arrArguments[2] +'\');`';
				return str;
            case 'arr':
                var strVarArrName = this._getVariableArrayName() || '';
				var arr = [];
				str = 'var arr' + strVarArrName + ' = [';
				for (var iArg = 3; iArg < arrArguments.length; iArg++ ) {
					arr.push('\'' + arrArguments[iArg] + '\'');
				}
				str += arr.toString() + '];';
				return str;				
            case 'str':
                var strVarStrName = this._getVariableStringName() || '';
				str = 'var str' + strVarStrName + ' = \'\';';
				return str;						
            default:
                return 'Invalid inputs. Do not be afraid to try {} , we will catch {} you.';
        }
    },

    _getVariableTableName: function() {
        var strVariableTableName = '';
        var arrArguments = this.arrArguments || [];
        var strTableName = arrArguments[2] || ''; // incident, sn_compliance_control, etc
        var grTableName = new GlideRecord(strTableName);
        if (grTableName.isValid())
            strTableName = grTableName.getClassDisplayValue();
        return this._getCamelCase(strTableName);
    },
    _getVariableArrayName: function() {
        var strVariableTableName = '';
        var arrArguments = this.arrArguments || [];
        var strName = arrArguments[2] || ''; // incident, sn_compliance_control, etc
        return this._getCamelCase(strName);
    },	
    _getVariableStringName: function() {
        var strVariableTableName = '';
        var arrArguments = this.arrArguments || [];
        var strName = arrArguments[2] || ''; // incident, sn_compliance_control, etc
        return this._getCamelCase(strName);
    },	
    _getCamelCase: function(strDisplayName) {
        strDisplayName = strDisplayName || '';
        strDisplayName = strDisplayName.toLowerCase();
        var arrNames = strDisplayName.split(' ');
        for (var iName = 0; iName < arrNames.length; iName++) {
            var strName = arrNames[iName];
            arrNames[iName] = strName.charAt(0).toUpperCase() + strName.slice(1);
        }
        return arrNames.join('');
    },

    type: 'Gulash'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>w.geek6</sys_created_by>
        <sys_created_on>2022-10-08 22:00:22</sys_created_on>
        <sys_id>8e6de2a3971e5110b29b7c80f053af5d</sys_id>
        <sys_name>Gulash</sys_name>
        <sys_package display_value="SlackerBot" source="x_snc_slackerbot">b02cf9e61b861d10d806dc23b24bcb3f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SlackerBot">b02cf9e61b861d10d806dc23b24bcb3f</sys_scope>
        <sys_update_name>sys_script_include_8e6de2a3971e5110b29b7c80f053af5d</sys_update_name>
    </sys_script_include>
</record_update>
